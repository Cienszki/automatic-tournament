
"use client";

import * as React from "react";
import Link from "next/link";
import { doc, getDoc, collection, query, where, getDocs, orderBy } from "firebase/firestore";
import { db } from "@/lib/firebase";
import type { Team, Match, Player } from "@/lib/definitions";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Crown, Loader2, ShieldQuestion, UserPlus, Fingerprint, Copy, LogIn } from "lucide-react";
import { RosterCard } from "@/components/app/my-team/RosterCard";
import { SchedulingCard } from "@/components/app/my-team/SchedulingCard";
import { TeamStatsGrid } from "@/components/app/my-team/TeamStatsGrid";
import { PlayerAnalyticsTable } from "@/components/app/my-team/PlayerAnalyticsTable";
import { MatchHistoryTable } from "@/components/app/my-team/MatchHistoryTable";
import { NextMatchCard } from "@/components/app/my-team/NextMatchCard";
import { MyTeamHeader } from "@/components/app/my-team/MyTeamHeader";
import { TeamStatusCard } from "@/components/app/my-team/TeamStatusCard";
import { Button } from "@/components/ui/button";
import { useAuth } from "@/context/AuthContext";
import { useToast } from "@/hooks/use-toast";
import { getUserTeam } from "@/lib/team";

async function getMyTeamData(teamId: string): Promise<{ team: Team | undefined, upcomingMatches: Match[], pastMatches: Match[] }> {
  try {
    const teamDocRef = doc(db, "teams", teamId);
    const teamDocSnap = await getDoc(teamDocRef);

    if (!teamDocSnap.exists()) {
      return { team: undefined, upcomingMatches: [], pastMatches: [] };
    }

    const teamData = teamDocSnap.data() as Omit<Team, 'id' | 'players'>;

    // Fetch players from the subcollection
    const playersCollectionRef = collection(db, "teams", teamId, "players");
    const playersQuery = query(playersCollectionRef, orderBy("nickname"));
    const playersSnapshot = await getDocs(playersQuery);
    const players = playersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Player));

    const team: Team = { 
        id: teamDocSnap.id, 
        ...teamData,
        players 
    };

    const matchesRef = collection(db, "matches");
    const q = query(matchesRef, where("teams", "array-contains", teamId));
    const querySnapshot = await getDocs(q);
    const teamMatches = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Match));

    const upcomingMatches = teamMatches
      .filter((m) => m.status === 'upcoming')
      .sort((a, b) => new Date(a.dateTime).getTime() - new Date(b.dateTime).getTime());

    const pastMatches = teamMatches
      .filter((m) => m.status === 'completed')
      .sort((a, b) => new Date(b.dateTime).getTime() - new Date(a.dateTime).getTime());

    return { team, upcomingMatches, pastMatches };
  } catch (error) {
    console.error("Error fetching team data:", error);
    return { team: undefined, upcomingMatches: [], pastMatches: [] };
  }
}

// The main dashboard component when the user is logged in
function MyTeamDashboard({ team, upcomingMatches, pastMatches }: { team: Team; upcomingMatches: Match[]; pastMatches: Match[] }) {
  const totalFantasyPoints = team.players.reduce(
    (sum, player) => sum + (player.fantasyPointsEarned ?? 0),
    0
  );
  const nextMatch = upcomingMatches[0];

  return (
    <div className="space-y-8">
      <MyTeamHeader team={team} />
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
            <SchedulingCard upcomingMatches={upcomingMatches} team={team} />
            <NextMatchCard match={nextMatch} teamId={team.id} />
          </div>
          <TeamStatsGrid team={team} />
          <PlayerAnalyticsTable players={team.players} />
        </div>
        <div className="lg:col-span-1 space-y-6">
          <TeamStatusCard team={team} />
          <RosterCard team={team} upcomingMatches={upcomingMatches} />
           <Card className="shadow-lg">
                <CardHeader>
                    <CardTitle className="flex items-center text-primary">
                        <Crown className="mr-2" />
                        Fantasy Performance
                    </CardTitle>
                </CardHeader>
                <CardContent className="text-center">
                    <p className="text-4xl font-bold text-foreground">{totalFantasyPoints.toFixed(1)}</p>
                    <p className="text-muted-foreground">Total fantasy points generated by your players.</p>
                </CardContent>
            </Card>
        </div>
      </div>
      <MatchHistoryTable matches={pastMatches} teamId={team.id} />
    </div>
  );
}

// The prompt to show when the user is not logged in
function LoginPrompt() {
    const { signInWithGoogle } = useAuth();
    return (
      <Card className="shadow-xl max-w-2xl mx-auto">
        <CardHeader className="text-center">
          <ShieldQuestion className="h-16 w-16 mx-auto text-primary mb-4" />
          <CardTitle className="text-4xl font-bold text-primary">Team Dashboard</CardTitle>
          <CardDescription className="text-lg text-muted-foreground">
            Log in to manage your team or register a new one.
          </CardDescription>
        </CardHeader>
        <CardContent className="text-center space-y-4">
          <Button onClick={signInWithGoogle} size="lg" className="w-full">
            <LogIn className="mr-2 h-5 w-5" />
            Sign in with Google
          </Button>
        </CardContent>
      </Card>
    );
}

// Prompt for logged-in users without a team
function NoTeamPrompt() {
    const { user } = useAuth();
    const { toast } = useToast();

    const handleCopyId = () => {
        if (user?.uid) {
            navigator.clipboard.writeText(user.uid);
            toast({
                title: "User ID Copied!",
                description: "Your Firebase User ID has been copied to the clipboard.",
            });
        }
    };

    return (
        <Card className="shadow-xl max-w-2xl mx-auto">
            <CardHeader className="text-center">
                <UserPlus className="h-16 w-16 mx-auto text-primary mb-4" />
                <CardTitle className="text-4xl font-bold text-primary">Welcome!</CardTitle>
                <CardDescription className="text-lg text-muted-foreground">
                    It looks like you don't have a team yet.
                </CardDescription>
            </CardHeader>
            <CardContent className="text-center space-y-6">
                <p className="text-muted-foreground">
                    Ready to compete? Register your team now to join the tournament!
                </p>
                <Button asChild size="lg">
                    <Link href="/register">
                        Register a New Team
                    </Link>
                </Button>
                 {user?.uid && (
                    <Card className="mt-6 bg-muted/50 p-4 text-left">
                        <h3 className="text-sm font-semibold text-foreground flex items-center mb-2">
                           <Fingerprint className="h-4 w-4 mr-2 text-accent"/> For Admin Setup
                        </h3>
                        <p className="text-xs text-muted-foreground mb-3">To become an admin, copy your User ID below and add it to the 'admins' collection in your Firestore database.</p>
                        <div className="flex items-center space-x-2">
                            <input
                                readOnly
                                value={user.uid}
                                className="flex-1 p-2 bg-background border rounded-md text-xs font-mono"
                            />
                            <Button variant="ghost" size="icon" onClick={handleCopyId} aria-label="Copy User ID">
                                <Copy className="h-4 w-4"/>
                            </Button>
                        </div>
                    </Card>
                )}
            </CardContent>
        </Card>
    );
}

// The main page component that handles logic
export default function MyTeamPage() {
  const { user } = useAuth();
  const [teamId, setTeamId] = React.useState<string | null>(null);
  const [teamData, setTeamData] = React.useState<{ team: Team | undefined; upcomingMatches: Match[]; pastMatches: Match[] } | null>(null);
  const [isLoading, setIsLoading] = React.useState(true);
  
  React.useEffect(() => {
    async function checkUserTeam() {
      if (user) {
        setIsLoading(true);
        const id = await getUserTeam(user.uid);
        setTeamId(id);
        if (id) {
          const data = await getMyTeamData(id);
          setTeamData(data);
        }
        setIsLoading(false);
      } else {
        setIsLoading(false);
      }
    }
    checkUserTeam();
  }, [user]);
  
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="h-16 w-16 animate-spin text-primary" />
      </div>
    );
  }

  if (!user) {
    return <LoginPrompt />;
  }

  if (teamId && teamData?.team) {
    return (
      <MyTeamDashboard 
        team={teamData.team} 
        upcomingMatches={teamData.upcomingMatches} 
        pastMatches={teamData.pastMatches} 
      />
    );
  }
  
  return <NoTeamPrompt />;
}
