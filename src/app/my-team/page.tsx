
import { mockTeams, mockMatches } from "@/lib/mock-data";
import type { Team } from "@/lib/definitions";
import { notFound } from "next/navigation";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Crown } from "lucide-react";
import { RosterCard } from "@/components/app/my-team/RosterCard";
import { SchedulingCard } from "@/components/app/my-team/SchedulingCard";
import { TeamStatsGrid } from "@/components/app/my-team/TeamStatsGrid";
import { PlayerAnalyticsTable } from "@/components/app/my-team/PlayerAnalyticsTable";
import { MatchHistoryTable } from "@/components/app/my-team/MatchHistoryTable";
import { NextMatchCard } from "@/components/app/my-team/NextMatchCard";
import { MyTeamHeader } from "@/components/app/my-team/MyTeamHeader";
import { TeamStatusCard } from "@/components/app/my-team/TeamStatusCard";

// In a real app, this would come from user authentication
const CAPTAIN_TEAM_ID = 'team1';

async function getMyTeamData(teamId: string) {
  const team = mockTeams.find((t) => t.id === teamId);
  if (!team) {
    return { team: undefined, upcomingMatches: [], pastMatches: [] };
  }

  const teamMatches = mockMatches.filter(
    (m) => m.teamA.id === teamId || m.teamB.id === teamId
  );

  const upcomingMatches = teamMatches
    .filter((m) => m.status === 'upcoming')
    .sort((a, b) => new Date(a.dateTime).getTime() - new Date(b.dateTime).getTime());

  const pastMatches = teamMatches
    .filter((m) => m.status === 'completed')
    .sort((a, b) => new Date(b.dateTime).getTime() - new Date(a.dateTime).getTime());

  return { team, upcomingMatches, pastMatches };
}

export default async function MyTeamPage() {
  const { team, upcomingMatches, pastMatches } = await getMyTeamData(CAPTAIN_TEAM_ID);

  if (!team) {
    // This could redirect to a team selection page or show an error
    notFound();
  }

  const totalFantasyPoints = team.players.reduce(
    (sum, player) => sum + (player.fantasyPointsEarned ?? 0),
    0
  );
  
  const nextMatch = upcomingMatches[0];

  return (
    <div className="space-y-8">
      {/* Header Card replaced with client component */}
      <MyTeamHeader team={team} />

      {/* Main Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Column */}
        <div className="lg:col-span-2 space-y-6">
          <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
            <SchedulingCard upcomingMatches={upcomingMatches} team={team} />
            <NextMatchCard match={nextMatch} teamId={team.id} />
          </div>
          <TeamStatsGrid team={team} />
          <PlayerAnalyticsTable players={team.players} />
        </div>

        {/* Right Column */}
        <div className="lg:col-span-1 space-y-6">
          <TeamStatusCard team={team} />
          <RosterCard players={team.players} teamId={team.id} />
           <Card className="shadow-lg">
                <CardHeader>
                    <CardTitle className="flex items-center text-primary">
                        <Crown className="mr-2" />
                        Fantasy Performance
                    </CardTitle>
                </CardHeader>
                <CardContent className="text-center">
                    <p className="text-4xl font-bold text-foreground">{totalFantasyPoints.toFixed(1)}</p>
                    <p className="text-muted-foreground">Total fantasy points generated by your players.</p>
                </CardContent>
            </Card>
        </div>
      </div>
      
      {/* Match History (Full Width) */}
      <MatchHistoryTable matches={pastMatches} teamId={team.id} />

    </div>
  );
}

export const metadata = {
  title: "My Team | Tournament Tracker",
  description: "Manage your team, schedule matches, and track performance.",
};
